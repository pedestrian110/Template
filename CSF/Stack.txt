                                                       ***Nearest Greater to Right***

vector<int>NGR(vector<int>&a)
{
vector<int>res;
stack<int>sk;
for(int i=a.size()-1;i>=0;i--)
{
if(sk.empty())
{
res.push_back(-1);
}
else if(!sk.empty()&&sk.top()>a[i])
{
res.push_back(sk.top());
}
else if(sk.empty()>0&&sk.top()<=a[i])
{
while(sk.empty()&&sk.top()<=a[i])sk.pop();
if(sk.empty())
res.push_back(-1);
else
res.push_back(sk.top());
}
sk.push(a[i]);
}
reverse(res.begin(),res.end());
return res;
}

                                                        ***Nearest Greater to Left***

vector<int>NGL(vector<int>&a)
{
vector<int>res;
stack<int>sk;
for(int i=0;i<a.size();i++)
{
if(sk.empty())
{
res.push_back(-1);
}
else if(!sk.empty()&&sk.top()>a[i])
{
res.push_back(sk.top());
}
else if(sk.empty()>0&&sk.top()<=a[i])
{
while(sk.empty()&&sk.top()<=a[i])sk.pop();
if(sk.empty())
res.push_back(-1);
else
res.push_back(sk.top());
}
sk.push(a[i]);
}
return res;
}

                                                         ***Nearest Smaller to Left***

vector<int>NSL(vector<int>&a)
{
vector<int>res;
stack<int>sk;
for(int i=0;i<a.size();i++)
{
if(sk.empty())
{
res.push_back(-1);
}
else if(!sk.empty()&&sk.top()<a[i])
{
res.push_back(sk.top());
}
else if(sk.empty()>0&&sk.top()>=a[i])
{
while(sk.empty()&&sk.top()>=a[i])sk.pop();
if(sk.empty())
res.push_back(-1);
else
res.push_back(sk.top());
}
sk.push(a[i]);
}
return res;
}

                                                         ***Nearest Smaller to Right***

vector<int>NSR(vector<int>&a)
{
vector<int>res;
stack<int>sk;
for(int i=a.size()-1;i>=0;i--)
{
if(sk.empty())
{
res.push_back(-1);
}
else if(!sk.empty()&&sk.top()<a[i])
{
res.push_back(sk.top());
}
else if(sk.empty()>0&&sk.top()>=a[i])
{
while(sk.empty()&&sk.top()>=a[i])sk.pop();
if(sk.empty())
res.push_back(-1);
else
res.push_back(sk.top());
}
sk.push(a[i]);
}
reverse(res.begin(),res.end());
return res;
}

  
                                                ***Nearest Smaller to left(index Based)***

vector<int>NSL(vector<int>&a)
{
vector<int>res(a.size(),-1);
stack<int>sk;
for (int i = a.size() - 1; i >= 0; i--) {
            while (!sk.empty() && a[sk.top()] > a[i]) {
                res[sk.top()] = i;
                sk.pop();
            }
            sk.push(i);
        }
return res;
}

                                                 ***Nearest Smaller to Right(index Based)***

vector<int>NSR(vector<int>&a)
{
int n=a.size();
vector<int>res(a.size(),n);
stack<int>sk;
for (int i = 0; i < n; i++) {
            while (!sk.empty() && a[sk.top()] > a[i]) {
                res[sk.top()] = i; 
                sk.pop();
            }
            sk.push(i);
        }
return res;
}

                                                         ***Identification***

1.Array or string
2.j depend on i or j is function of i
  for(int i=0;i<n;i++)
  j=0 to i ,j++
  or
  j=i to 0 ,j--
  or
  j=i to n, j++
  or
  j=n to i, j--