Generic Tree or N-array Tree -> any node can have any number of child.
Ancestor -> parent parents
***In time and Out time of a node***

map<int, pair<int, int>> time;
int t = 0;
map yehi represent kar raha hai Label -> {in_time, out_time}

void dfs (int node, int par) {
time[node].first = t;
t++;
cout << node << " ";
for (auto child : adj[node]) {
if (child == par) continue;
dfs(child, node);
}
time[node].second = t;
t++;
}

***if u is ancestor of v or not***

in[u] < in[v] && out[u] > out[v] && in[v] < out[v]

***Level Order traversal***
level start with 0
height = max(level) + 1

***Binary Lifting***

We are storing logn parent for each node
parent[node][x] --> 2^x th parent of node
earlier we are only doing this parent[node] --> just parent
In binary lifting by storing parent we can have optimisation.
int parent[][];
void dfs(int node, int p) {
parent[node][0] = p;
for (int i = 1; i<= 16; i++)
parent[node][i] = parent[parent[node][i - 1]][i - 1];
for (auto it : adj[node]) {
if (it == p) continue;
dfs(it, node);
}
}
int kthparent(int node, int k) {
for (int i = 16; i>= 0; i--) {
if ((k>>i)&1) {
node = dp[node][i];
}
}
return node;
}


***Euler Tour Type 1 ***

vector<int> flat;
map<int, int> mp;
int idx = 0;
void dfs(int node, int par, vector<int> adj[]) {
 if (mp.find(node) == mp.end()) {
    mp[node] = idx;
  }
  flat.push_back(node);
  idx++;
  for (auto it : adj[node]) {
    if (it == par) continue;
    dfs(it, node, adj);
    flat.push_back(node);
    idx++;
   }
}

***Euler Tour Type 2***

vector<int> flat;
map<int, pair<int, int>> mp;
int idx = 0;
void dfs(int node, int par, vector<int> adj[]) {
  mp[node].first = idx;
  flat.push_back(node);
  idx++;
  for (auto it : adj[node]) {
    if (it == par) continue;
    dfs(it, node, adj);
   }
  mp[node].second = idx;
  flat.push_back(node);
  idx++;
}

***Re-rooting techinque***

ll in[200005];
ll out[200005];
void dfs (ll node, ll parent, vector<ll> adj[]) {
    in[node] = 0;
    for (auto child : adj[node]) {
        if (child == parent) continue;
        dfs(child, node, adj);
        in[node] = max(in[node], 1 + in[child]);
    }
}
void root(ll node, ll parent, vector<ll> adj[]) {
    ll mx1 = -1, mx2 = -1, child = 0;
    for (auto v: adj[node]) {
        if (v == parent) continue;
        if (in[v] > mx1 - 1) {
            child = v;
            mx2 = mx1;
            mx1 = in[v] + 1;
        }
        else if (in[v] > mx2 - 1) {
            mx2 = in[v] + 1;
        }
    }
    for (auto v : adj[node]) {
        if (v == parent) continue;
        ll longest = mx1;
        if (v == child) {
            longest = mx2;
        }
        out[v] = 1 + max(out[node], longest);
        root(v, node, adj);
    }
}
void knightstour() {
   ll n;
   cin >> n;
   vector<ll> adj[n + 1];
   for (ll i = 1; i < n; i++) {
    ll u, v;
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
   }
   dfs(1, 0, adj);
   root(1, 0, adj);
   for (ll i = 1; i <= n; i++) {
    cout << max(in[i], out[i]) << " ";
   }
   cout << endl;
} 

***All node distance from a node ***

ll in[200005];
ll subtree[200005];
ll dp[200005];
void dfs (ll node, ll parent, vector<ll> adj[]) {
    subtree[node] = 1;
    in[node] = 0;
    for (auto child : adj[node]) {
        if (child == parent) continue;
        dfs(child, node, adj);
        subtree[node] += subtree[child];
        in[node] += in[child] + subtree[child];
    }
}
void dfs2(ll node, ll parent, ll n, vector<ll> adj[]) {
    for (auto child : adj[node]) {
        if (child == parent) continue;
        dp[child] += n - 2 * subtree[child] + dp[node];
        dfs2(child, node, n, adj);
    }
}
void knightstour() {
   ll n;
   cin >> n;
   vector<ll> adj[n + 1];
   for (ll i = 1; i < n; i++) {
    ll u, v;
    cin >> u >> v;
    adj[u].push_back(v);
    adj[v].push_back(u);
   }
   dfs(1, 0, adj);
   dp[1] = in[1];
   dfs2(1, 0, n, adj);
   for (ll i = 1; i <= n; i++) {
    cout << dp[i] << " ";
   }
   cout << endl;
}


Queries on trees
1.Merge Smaller into Bigger (Dp Optimization Technique)
2.Mo's Algorithm on trees
3.Centroid Decomposition
4.Heavy-Light Decomposition
Query on Path from a->b
Query on subtree

***Euler tour tree(ETT)***
It is a method for representing a rooted undirected tree as a number sequence.

int timer;
int startTime[100],terminateTime[100],FT[100];//flatting array
vector<int>arr[100];
void dfs(int node,int parent)
{
       startTime[node]=timer;
       FT[timer]=node;
       timer++;
       for(int child:arr[node])
        {
               if(child!=parent)
                { 
                    dfs(child,node);
                }
          }
          terminateTime[node]=timer;
          FT[timer]=node;
          timer++;
}
int main()
{
          int n,a,b;
          cin>>n;
          for(int i=1;i<n;i++)
          {
           cin>>a>>b;  
           arr[a].push_back(b );
           arr[b].push_back(a); 
           }
           timer=1;
           dfs(1,-1);
}

-->with the help of startTime and TerminateTime of a node we can calculate how many and which are the nodes present in the subtree of the node with the help of Flatting array FT.       

                                                             ***DP on Trees***

General Idea:
1.Store some info for each node.
2.Compute this info for current node by combining the info for children (dfs).

This is the way you should write dp on trees -->

vector<vector<int>>adj(200005);
vector<int>l(200005),r(200005);
int dp[200005][2];
void dfs(int node, int parent)
{
    for(auto u:adj[node])
    {
        if(u==parent)
        continue;
        dfs(u,node);

    }
    for(auto u:adj[node])
    {
         if(u==parent)
         continue;
         dp[node][0]+=max(abs(l[node]-l[u])+dp[u][0],abs(l[node]-r[u])+dp[u][1]);
         dp[node][1]+=max(abs(r[node]-l[u])+dp[u][0],abs(r[node]-r[u])+dp[u][1]);
    }
}