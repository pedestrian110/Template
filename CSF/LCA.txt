                                                      *** Lowest Common Ancestor ***

LCA-->You just start moving upward toward root the first point where you meet is known as LCA of (A,B) nodes.

Source:Galin Colin

struct lca_lift {
  const int lg = 20;// log(n)--> maximum number of jumps required
  int n;// number of nodes in a tree
  vector<int> depth;// array storing depth of each node from root node.
  vector<vector<int> > edges;
  vector<vector<int> > lift; // Each lift[i][j] stores the j th ancestor of node i.
  
  void init(int sz) {
    n = sz;
    depth = vector<int>(n);
    edges = vector<vector<int> >(n, vector<int>());
    lift = vector<vector<int> >(n, vector<int>(lg, -1));
  }
 
  void edge(int a, int b) {
    edges[a].push_back(b);
    edges[b].push_back(a);
  }

 /**Attach new node to existing node as a child**/

  void attach(int node_to_attach, int node_to_attach_to) {
    int a = node_to_attach, b = node_to_attach_to;
    edge(a, b);
 
    lift[a][0] = b;
 
    for (int i = 1; i < lg; i++) {
      if (lift[a][i - 1] == -1) lift[a][i] = -1;
      else lift[a][i] = lift[lift[a][i - 1]][i - 1];
    }
 
    depth[a] = depth[b] + 1;
  }
 
  void init_lift(int v = 0) {
    depth[v] = 0;
    dfs(v, -1);
  }
 
  void dfs(int v, int par) {
    lift[v][0] = par;
 
    for (int i = 1; i < lg; i++) {
      if (lift[v][i - 1] == -1) lift[v][i] = -1;
      else lift[v][i] = lift[lift[v][i - 1]][i - 1];
    }
 
    for (int x: edges[v]) {
      if (x != par) {
        depth[x] = depth[v] + 1;
        dfs(x, v);
      }
    }
  }

 /**return the ancestor of node v that is k level up **/

  int get(int v, int k) {
    for (int i = lg - 1; i >= 0; i--) {
	  if (v == -1) return v;
      if ((1 << i) <= k) {
        v = lift[v][i];
        k -= (1 << i);
      }
    }
    return v;
  }

 /**find the lowest common ancestor of node a and b **/

  int get_lca(int a, int b) {
    if (depth[a] < depth[b]) swap(a, b);
    int d = depth[a] - depth[b];
    int v = get(a, d);
    if (v == b) {
      return v;
    } else {
      for (int i = lg - 1; i >= 0; i--) {
        if (lift[v][i] != lift[b][i]) {
          v = lift[v][i];
          b = lift[b][i];
        }
      }
      return lift[b][0];
    }
  }

  /** calculates distance between nodes a and b (number of edges ). **/

  int get_dist(int a, int b) {
	  int v = get_lca(a, b);
	  return depth[a] + depth[b] - 2 * depth[v];
  }
};

--> How to use this
  lca_lift lca;
  lca.init(n);
  for (int i = 0 ; i < n ; i++ ){
    cin >> x >> y;
    --x; --y;
    lca.edge(x, y);
  }
  lca.init_lift();
 