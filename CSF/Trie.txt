                                               ***Trie***

struct Node
{
  Node*links[26];
  bool flag;
  Node()
  {
    for(int i=0;i<26;i++)
    {
        links[i]=NULL;
    }
    flag=false;
  }
};
struct Trie
{
 Node*root;
 Trie()
 {
  root=new Node();
 }
 void insert(string &word)
 {
    Node *node=root;
    for(int i=0;i<word.size();i++)
    {
        if(node->links[word[i]-'a']==NULL)
        {
            node->links[word[i]-'a']=new Node();
        }
        node=node->links[word[i]-'a'];
    }
    node->flag=true;
 }
 bool search(string &word)
 {
    Node*node=root;
    for(int i=0;i<word.size();i++)
    {
        if(node->links[word[i]-'a']==NULL)
        return false;
        node=node->links[word[i]-'a'];
    }
    return node->flag;
 }
 bool startsWith(string &prefix)
 {
    Node*node=root;
    for(int i=0;i<prefix.size();i++)
    {
        if(node->links[prefix[i]-'a']==NULL)
        return false;
        node=node->links[prefix[i]-'a'];
    }
    return true;
 }
};

                                              ***Trie***
struct Node
{
    Node* links[26];
    int endCount;
    int prefixCount;
    Node()
    {
        for(int i=0;i<26;i++)
        {
            links[i]=NULL;
        }
        endCount=0;
        prefixCount=0;
    }
};
struct Trie
{
    Node*root;
    Trie()
    {
        root=new Node();
    }
    void insert(string word)
    {
        Node*node=root;
        for(int i=0;i<word.size();i++)
        {
            if(node->links[word[i]-'a']==NULL)
            {
                node->links[word[i]-'a']=new Node();
            }
            node=node->links[word[i]-'a'];
            node->prefixCount++;
        }
        node->endCount++;
    }
    int countWordsEqualTo(string word)
    {
        Node* node=root;
        for(int i=0;i<word.size();i++)
        {
            if(node->links[word[i]-'a']==NULL)
            return 0;
            node=node->links[word[i]-'a'];
        }
        return node->endCount;
    }
    int countWordsStartingWith(string word)
    {
        Node*node=root;
        for(int i=0;i<word.size();i++)
        {
            if(node->links[word[i]-'a']==NULL)
            return 0;
            node=node->links[word[i]-'a'];
        }
        return node->prefixCount;
    }
    void erase(string word)
    {
        if(countWordsEqualTo(word)==0)
        return ;
        Node*node=root;
        for(int i=0;i<word.size();i++)
        {
            node=node->links[word[i]-'a'];
            node->prefixCount--;

        }
        node->endCount--;
    }
};


Source:Galin Colin

struct Trie {
	vector<int> v, lt, rt;
	int id = 0;
	Trie() : v(1, 0), lt(1, -1), rt(1, -1) {}
	void create() {
		v.emplace_back(0);
		lt.emplace_back(-1);
		rt.emplace_back(-1);
		++id;
	}
	void add(int x) {
		int node = 0;
		for (int bit = 30; bit >= 0; --bit) {
			int b = x&(1<<bit);
			++v[node];
			if (b == 0) {
				if (lt[node] == -1) {
					create();
					lt[node] = id;
				}
				node = lt[node];
			}
			else {
				if (rt[node] == -1) {
					create();
					rt[node] = id;
				}
				node = rt[node];
			}
		}
		++v[node];
	}
    int maxxor (int x) {
        int node = 0, ret = 0;
        for (int bit = 30; bit >= 0; --bit) {
            int b = (x >> bit) & 1;
            if (b == 0) {
                if (rt[node] != -1 and v[rt[node]] > 0) {
                    ret += 1 << bit;
                    node = rt[node];
                }
                else node = lt[node];
            }
            else {
                if (lt[node] != -1 and v[lt[node]] > 0) {
                    ret += 1 << bit;
                    node = lt[node];
                }
                else node = rt[node];
            }
        }
        return ret;
    }
	void erase(int x) { // Assumes x exists
		int node = 0;
		for (int bit = 30; bit >= 0; --bit) {
			int b = x&(1<<bit);
			--v[node];
			if (b == 0) node = lt[node];
			else node = rt[node];
		}
		--v[node];
	}
};