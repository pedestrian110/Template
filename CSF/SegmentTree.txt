                                            ***Segment Tree ***
template <typename T> 
struct segtree {
  int n, depth;
  vector<T> tree, lazy;

  void init(int s, long long* arr) {
    n = s;
    tree = vector<T>(4 * s, 0);
    lazy = vector<T>(4 * s, 0);
    init(0, 0, n - 1, arr);
  }

  T init(int i, int l, int r, long long* arr) {
    if (l == r) return tree[i] = arr[l];

    int mid = (l + r) / 2;
    T a = init(2 * i + 1, l, mid, arr),
          b = init(2 * i + 2, mid + 1, r, arr);
    return tree[i] = a.op(b);
  }

  void update(int l, int r, T v) {
	if (l > r) return;
    update(0, 0, n - 1, l, r, v);
  }

  T update(int i, int tl, int tr, int ql, int qr, T v) {
    eval_lazy(i, tl, tr);
	
	if (tr < ql || qr < tl) return tree[i];
    if (ql <= tl && tr <= qr) {
      lazy[i] = lazy[i].val + v.val;
      eval_lazy(i, tl, tr);
      return tree[i];
    }
    
    int mid = (tl + tr) / 2;
    T a = update(2 * i + 1, tl, mid, ql, qr, v),
          b = update(2 * i + 2, mid + 1, tr, ql, qr, v);
    return tree[i] = a.op(b);
  }

  T query(int l, int r) {
	if (l > r) return T::null_v;
    return query(0, 0, n-1, l, r);
  }

  T query(int i, int tl, int tr, int ql, int qr) {
    eval_lazy(i, tl, tr);
    
    if (ql <= tl && tr <= qr) return tree[i];
    if (tr < ql || qr < tl) return T::null_v;

    int mid = (tl + tr) / 2;
    T a = query(2 * i + 1, tl, mid, ql, qr),
          b = query(2 * i + 2, mid + 1, tr, ql, qr);
    return a.op(b);
  }

  void eval_lazy(int i, int l, int r) {
    tree[i] = tree[i].lazy_op(lazy[i], (r - l + 1));
    if (l != r) {
      lazy[i * 2 + 1] = lazy[i].val + lazy[i * 2 + 1].val;
      lazy[i * 2 + 2] = lazy[i].val + lazy[i * 2 + 2].val;
    }

    lazy[i] = T();
  }
};

How to use-->

segtree<T> my_segtree;
my_segtree.init(n,c);-->where is c is an array of length of n.






-->Divide the whole array into two halves then their half into halves until we reach leaf node and then merge
-->Traverse the tree from the top until either you find the range is completely within range or completely outside the range.

How to store the segment tree?

vector<int>tree;
vector<int>A;
void build(int node, int start, int end){
   if(start==end){
       //leaf node
       tree[node]=A[start];
       return ;
     }
    int mid=(start+end)/2;
    //left node
    build(2*node,start,mid);
    //right node
    build(2*node+1,mid+1,end);
    
    //Merge
    tree[node]=tree[2*node]+tree[2*node+1];
}
void update(int node,int start,int end, int i, int x){
    if(start==end){
       A[i]=x;
       tree[node]=x;
       return ;
    }
    int mid=(start+end)/2;
    if(i<=mid)update(2*node,start,mid,i,x);
    else update(2*node+1,mid+1,end,i,x);
    tree[node]=tree[2*node]+tree[2*node+1];
}
int query(int node,int start,int end,int lq,int rq){
    if(start>=lq&&end<=rq){
        return tree[node];
    }
    if(start>rq||end<lq){
        return 0;
    }
    int mid=(start+end)/2;
    return query(2*node,start,mid,lq,rq)+query(2*node+1,mid+1,end,lq,rq);
}
int main(){
    int n;
    cin>>n;
    A.resize(n);
    tree.resize(4*n);
    for(int i=0;i<n;i++){
       cin>>A[i];
    }
    build(1,0,n-1);
}


/* Finding minima in segment of array */

using ll =long long;
vector<ll>tree;
vector<ll>A;
void build(ll node,ll start,ll end){
   if(start==end){
      tree[node]=A[start];
      return ;
   }
   ll mid=(start+end)/2;
   build(2*node,start,mid);
   build(2*node+1,mid+1,end);
   tree[node]=min(tree[2*node],tree[2*node+1]);
}
void update(ll node, ll start,ll end,ll i,ll x){
   if(start==end){
      tree[node]=x;
      A[i]=x;
      return ;
   }
   ll mid=(start+end)/2;
   if(i<=mid){
      update(2*node,start,mid,i,x);
   }
   else{
      update(2*node+1,mid+1,end,i,x);
   }
   tree[node]=min(tree[2*node],tree[2*node+1]);
}
ll query(ll node,ll start,ll end,ll lq,ll rq){
   if(start>=lq&&end<=rq){
      return tree[node];
   }
   if(start>rq||end<lq){
      return INT_MAX;
   }
   ll mid=(start+end)/2;
   return min(query(2*node,start,mid,lq,rq),query(2*node+1,mid+1,end,lq,rq));
}
int main()
{
   int n;
   cin>>n;
   A.resize(n);
   tree.resize(4*n);
   for(int i=0;i<n;i++)
   cin>>A[i];
   build(1,0,n-1);
   int q;
   cin>>q;
   while(q--){
      int c;
      cin>>c;
      if(c==1){
         int i,x;
         cin>>i>>x;
         update(1,0,n-1,i,x);
      }
      else{
         int l,r;
         cin>>l>>r;
         cout<<query(1,0,n-1,l,r)<<endl;
      }
   }
}

/* Finding maxima in segment of array */

using ll =long long;
vector<ll>tree;
vector<ll>A;
void build(ll node,ll start,ll end){
   if(start==end){
      tree[node]=A[start];
      return ;
   }
   ll mid=(start+end)/2;
   build(2*node,start,mid);
   build(2*node+1,mid+1,end);
   tree[node]=max(tree[2*node],tree[2*node+1]);
}
void update(ll node, ll start,ll end,ll i,ll x){
   if(start==end){
      tree[node]=x;
      A[i]=x;
      return ;
   }
   ll mid=(start+end)/2;
   if(i<=mid){
      update(2*node,start,mid,i,x);
   }
   else{
      update(2*node+1,mid+1,end,i,x);
   }
   tree[node]=max(tree[2*node],tree[2*node+1]);
}
ll query(ll node,ll start,ll end,ll lq,ll rq){
   if(start>=lq&&end<=rq){
      return tree[node];
   }
   if(start>rq||end<lq){
      return INT_MIN;
   }
   ll mid=(start+end)/2;
   return max(query(2*node,start,mid,lq,rq),query(2*node+1,mid+1,end,lq,rq));
}
int main()
{
   int n;
   cin>>n;
   A.resize(n);
   tree.resize(4*n);
   for(int i=0;i<n;i++)
   cin>>A[i];
   build(1,0,n-1);
   int q;
   cin>>q;
   while(q--){
      int c;
      cin>>c;
      if(c==1){
         int i,x;
         cin>>i>>x;
         update(1,0,n-1,i,x);
      }
      else{
         int l,r;
         cin>>l>>r;
         cout<<query(1,0,n-1,l,r)<<endl;
      }
   }
}

/* Finding or of segment in an array */

using ll=long long;
vector<ll>tree;
vector<ll>A;
void build(ll node,ll start,ll end){
   if(start==end){
      tree[node]=A[start];
      return;
   }
   ll mid=(start+end)/2;
   build(2*node,start,mid);
   build(2*node+1,mid+1,end);
   tree[node]=tree[2*node]|tree[2*node+1];
}
void update(ll node,ll start,ll end,ll i,ll x){
   if(start==end){
      tree[node]=x;
      A[i]=x;
      return ;
   }
   ll mid=(start+end)/2;
   if(i<=mid){
      update(2*node,start,mid,i,x);
   }
   else{
      update(2*node+1,mid+1,end,i,x);
   }
   tree[node]=tree[2*node]|tree[2*node+1];
}
ll query(ll node,ll start,ll end,ll lq,ll rq){
   if(start>=lq&&end<=rq){
      return tree[node];
   }
   if(start>rq||end<lq){
      return 0;
   }
   ll mid=(start+end)/2;
   return query(2*node,start,mid,lq,rq)|query(2*node+1,mid+1,end,lq,rq);
}
int main()
{
    int n;
    cin>>n;
    A.resize(n);
    tree.resize(4*n);
    for(int i=0;i<n;i++){
      cin>>A[i];
    }
    build(1,0,n-1);
    int q;
    cin>>q;
    while(q--){
      int c;
      cin>>c;
      if(c==1){
          int i,x;
          cin>>i>>x;
          update(1,0,n-1,i,x);
      }
      else{
           int l,r;
           cin>>l>>r;
           cout<<query(1,0,n-1,l,r)<<endl;
      }
    }

}

/* Finding xor of segment in an array */

using ll=long long;
vector<ll>tree;
vector<ll>A;
void build(ll node,ll start,ll end){
   if(start==end){
      tree[node]=A[start];
      return;
   }
   ll mid=(start+end)/2;
   build(2*node,start,mid);
   build(2*node+1,mid+1,end);
   tree[node]=tree[2*node]^tree[2*node+1];
}
void update(ll node,ll start,ll end,ll i,ll x){
   if(start==end){
      tree[node]=x;
      A[i]=x;
      return ;
   }
   ll mid=(start+end)/2;
   if(i<=mid){
      update(2*node,start,mid,i,x);
   }
   else{
      update(2*node+1,mid+1,end,i,x);
   }
   tree[node]=tree[2*node]^tree[2*node+1];
}
ll query(ll node,ll start,ll end,ll lq,ll rq){
   if(start>=lq&&end<=rq){
      return tree[node];
   }
   if(start>rq||end<lq){
      return 0;
   }
   ll mid=(start+end)/2;
   return query(2*node,start,mid,lq,rq)^query(2*node+1,mid+1,end,lq,rq);
}
int main()
{
    int n;
    cin>>n;
    A.resize(n);
    tree.resize(4*n);
    for(int i=0;i<n;i++){
      cin>>A[i];
    }
    build(1,0,n-1);
    int q;
    cin>>q;
    while(q--){
      int c;
      cin>>c;
      if(c==1){
          int i,x;
          cin>>i>>x;
          update(1,0,n-1,i,x);
      }
      else{
           int l,r;
           cin>>l>>r;
           cout<<query(1,0,n-1,l,r)<<endl;
      }
    }

}

Problem 1: Even and odd queries
Sol:-
#include<bits/stdc++.h>
using namespace std;
using ll = long long ;
struct Node {
    ll ct_even;
    ll ct_odd;
};
vector<Node> tree;
vector<ll> A;
void build (ll node, ll start, ll end ) {
    if (start == end) {
       if ( ( ( A[start] % 2 == 0 ) ? 1 : 0 ) ) {
       tree[node].ct_odd = 0;
       tree[node].ct_even = 1;
       }
       else {
        tree[node].ct_odd = 1;
        tree[node].ct_even = 0;
       }
       return ;
    }
    ll mid = (start + end) / 2;
    build (2 * node, start, mid);
    build (2 * node + 1, mid + 1, end);
    tree[node].ct_even = tree[2 * node + 1].ct_even + tree[2 * node].ct_even;
    tree[node].ct_odd = tree[2 * node + 1].ct_odd + tree[2 * node].ct_odd;
}
void update ( ll node, ll start, ll end, ll i, ll x) {
    if ( start == end ) {
         if ( x % 2 == 0 ) {
           tree[node].ct_even = 1;
           tree[node].ct_odd = 0;
         }
           
         else {
           tree[node].ct_odd = 1;
           tree[node].ct_even = 0;
         }
        A[i] = x;
        return ;
    }
    ll mid = ( start + end ) / 2;
    if ( i <= mid ) {
        update ( 2 * node, start, mid, i, x );
    }
    else {
        update ( 2 * node + 1, mid + 1, end, i, x );
    }
    tree[node].ct_even = tree[ 2 * node + 1 ].ct_even + tree[ 2 * node ].ct_even;
    tree[node].ct_odd = tree[ 2 * node + 1 ].ct_odd + tree[ 2 * node ].ct_odd;
}
Node query ( ll node, ll start, ll end, ll lq, ll rq) {
     if ( start >= lq && end <= rq ) {
        return tree[node];
     }
     if ( start > rq || end < lq ) {
        Node zero;
        zero.ct_even = 0;
        zero.ct_odd = 0;
        return zero;
     }
     ll mid = ( start + end ) / 2;
     Node res_l = query ( 2 * node, start, mid, lq, rq );
     Node res_r = query ( 2 * node + 1, mid + 1, end, lq, rq );
     Node res;
     res.ct_even = res_l.ct_even + res_r.ct_even;
     res.ct_odd = res_l.ct_odd + res_r.ct_odd;
     return res;
}
int main(){
    ll n;
    cin >> n;
    A.resize (n);
    tree.resize (4 * n);
    for (int i = 0; i < n; i++) {
       cin >> A[i];
    }
    build ( 1, 0, n-1 );
    int q;
    cin >> q;
    while (q--) {
        int op;
        cin >> op;
        
        if (op == 0) {
            ll x, y;
            cin >> x >> y;
            x--;
            update ( 1, 0, n-1, x, y );
        }
        else if (op == 1) {
            ll l, r;
            cin >> l >> r;
            l--, r--;
            Node res = query ( 1, 0, n-1, l, r);
            cout << res.ct_even << endl;
        }
        else {
            ll l, r;
            cin >> l >> r;
            l--, r--;
            Node res = query ( 1, 0, n-1, l, r );
            cout << res.ct_odd << endl;
        }
    }

}

Problem 2:First min queries
Sol:-
#include<bits/stdc++.h>
using namespace std;
using ll = long long;
vector<ll> A;
vector<ll> tree;
void build ( ll node, ll start, ll end ) {
    if ( start == end ) {
        tree[node] = A[start];
        return ;
    }
    ll mid = ( start + end ) / 2;
    build (2 * node, start, mid);
    build (2 * node + 1, mid + 1, end);
    tree[node] = max( tree[2 * node + 1], tree[2 * node]);
}
void update ( ll node, ll start, ll end ,ll i, ll x) {
    if ( start == end ) {
        A[start] -= x;
        tree[node] = A[start];
        return ;
    }
    ll mid = ( start + end ) / 2;
    if (i <= mid) {
       update (2 * node, start, mid, i, x);
    }
    else {
        update (2 * node + 1, mid + 1, end, i, x);
    }
    tree[node] = max( tree[2 * node + 1], tree[2 * node]);
}
ll query (ll node, ll start, ll end,  ll x) {
    if ( tree[node] < x) {
        return -1;
    }
    if ( start == end ) {
        return start;
    }
    ll mid = ( start + end ) / 2;
    if ( tree[2 * node] >= x ) {
        return query ( 2 * node, start, mid, x );
    }
    else {
        return query ( 2 * node + 1, mid + 1, end , x );
    }
}
int main() {
    ll n, q;
    cin >> n >> q;
    A.resize(n);
    tree.resize(4 * n);
    for ( int i = 0; i < n; i++ ) {
        cin >> A[i];
    }
    build ( 1, 0 , n-1 );
    while (q--) {
        ll x;
        cin >> x;
        ll res = query ( 1, 0, n-1, x );
        if( res >= 0 ) {
            update ( 1, 0, n-1, res, x );
        }
        cout << res + 1 << " ";
    }
    cout << endl;
}

Problem 3:maximum subarray sum queries
Sol:-
#include <bits/stdc++.h>
using namespace std;

#define ll long long int
const int N = 200010;
struct ST
{
    ll maxi, lsum, rsum, sum;
    ST(ll sum = 0, ll maxi = 0, ll lsum = 0, ll rsum = 0) : sum(sum), maxi(maxi), lsum(lsum), rsum(rsum) {}
};

ST operator+(const ST &A, const ST &B)
{
    ST temp;
    temp.lsum = max(A.lsum, A.sum + B.lsum);
    temp.rsum = max(B.rsum, B.sum + A.rsum);
    temp.sum = A.sum + B.sum;
    temp.maxi = max(max(A.maxi, B.maxi), A.rsum + B.lsum);
    return temp;
}

struct segtree
{
    vector<ST> tree;
    segtree(int n = N)
    {
        tree.resize(4 * n);
    }

    void update(int node, int start, int end, int idx, ll val)
    {
        if (start == end)
        {
            ll x = max(val, 0LL);
            tree[node] = ST(val, x, x, x);
        }
        else
        {
            int mid = (start + end) >> 1;
            if (idx <= mid)
                update(2 * node, start, mid, idx, val);
            else
                update(2 * node + 1, mid + 1, end, idx, val);
            tree[node] = tree[2 * node] + tree[2 * node + 1];
        }
    }

    ll query()
    {
        return tree[1].maxi;
    }
};

signed main()
{
    int n, q;
    cin >> n >> q;

    segtree T(n);

    for (int i = 0; i < n; i++)
    {
        ll val;
        cin >> val;
        T.update(1, 0, n - 1, i, val);
    }

    for (int i = 0; i < q; i++)
    {
        int k;
        ll x;
        cin >> k >> x;
        k--;
        T.update(1, 0, n - 1, k, x);
        cout << T.query() << "\n";
    }
    return 0;
}

Problem 4: Range queries 2 (Range update and point query)
Sol:-
#include<bits/stdc++.h>
using namespace std;
using ll = long long;
vector<ll> tree;
void update (ll node, ll start, ll end, ll l, ll r, ll x) {
    if(start > r || end < l)
    return ;
    if ( start >= l && end <= r ) {
        tree[node] += x;
        return ;
    }
    ll mid = ( start + end ) / 2;
    update (2 * node, start, mid, l, r, x);
    update (2 * node + 1, mid + 1, end, l, r, x);
}
ll query (ll node, ll start, ll end, ll i) {
    if (start == end )
    return tree[node];
    ll mid = ( start + end ) / 2;
    if (i <= mid )
    return tree[node] + query(2 * node, start, mid, i);
    return tree[node] + query(2 * node + 1, mid + 1, end, i);
}
int main() {
    int n, q;
    cin >> n >> q;
    tree.resize(4 * n);
    for (int i = 0; i < n; i++) {
        int x;
        cin >> x;
        update (1, 0, n-1, i, i, x);
    }
    while (q-- ) {
        int t;
        cin >> t;
        if ( t == 1 ) {
            int i, j, x;
            cin >> i >> j >> x;
            i--, j--;
            update ( 1, 0, n-1, i, j, x );
        }
        else {
            int i;
            cin >> i;
            i--;
            cout << query (1, 0, n-1, i) << endl;
        }
    }
}


-->We have to only consider two things in segement tree
   First is that what we will store at each node
   Second is that how we will merge

Application of Segment Tree

1.Point Update and Range Query
Desgin a data structure to do some kind of operation
   Given N size Arr
       and Q query
           1 x v-->update pos x with v
           2 l r-->min of range[l,r] and count of min

2.Range update and point query
     1 l r v-->for l to r do arr[i]+=v
     2 x -->find arr[x]

3. 
   1 x v-->update arr[x]=v
   2 l r-->find max sum subarray(l,r)