                                                       ***Polynomial Rolling Hash***

hash(s)=s[0]+s[1]p+s[2]p^2+...+s[n-1]p^(n-1) mod m
#define mod 1e9+7;
long long getHash(string key)
{
 long long value=0;
 long long p=31;//p>=|character set size|
 long long p_power=1;
 for(char ch:key)
 {
  value=(value+(ch-'a'+1)*p_power)%mod;
  p_power=(p_power*p)%mod;
 }
 return value;
 }


struct RollingHash {
       ll mod=1e9+7;
       ll PreHash[100001];
       ll inv[100001];
       RollingHash(string txt) {
        ll p = 31;
        ll p_power = 1;
        inv[0] = 1;
        PreHash[0] = (txt[0] - 'a' + 1);
        for (int i = 1; i < txt.size(); i++) {
            char ch = txt[i];
            p_power = (p_power * p) % mod;
            PreHash[i] = (PreHash[i - 1] + (ch - 'a' + 1) * p_power) % mod;
        }
       }
       ll power(ll a, ll n) {
        ll res = 1;
        while (n) {
            if (n % 1) {
                res = (res * a) % mod;
                n >>= 1;
                a = (a * a) % mod;
            }
        }
        return res;
       }
       ll subHash(int l, int r) {
        int res = PreHash[r];
        if (l > 0) {
            res -= PreHash[l - 1];
        }
        res = (res * inv[l]) % mod;
        return res;
       }
};

Use-> RollingHash prh(txt);
Access->prh.subHash(l,r)-> 0 based indexing




                                                          ***Knuth Morris Pratt Algorithm(KMP)***
LPS->longest Prefix Suffix

class KMP {
public:
      vector<int> LPS(string pattern) {
            int m = pattern.size();
            vector<int> lps(m);
            lps[0] = 0;

            int i = 1;
            int len = 0;
            while (i < m) {
              if (pattern[i] == pattern[len]) {
                 lps[i] = len + 1;
                 len += 1;
                 i++;
               } else {
                    if (len != 0) {
                     len = lps[len - 1];
                 } else {
                     i++;
                    }
                }
             }

            return lps;
       }
public:       
       vector<int> kmp(string pattern, string txt) {
        vector<int> lps = LPS(pattern);

        int n = txt.size(), m = pattern.size();

        int i = 0, j = 0;
        vector<int> res;

        while (i < n) {
            if (txt[i] == pattern[j]) {
               i++, j++;
            } else {
               if (j != 0) {
                j = lps[j - 1];
                } 
                else {
                i++;
                }
             }

          if (j == m) {
             res.push_back(i - j + 1);
             j = lps[j - 1];
         }

        }

         return res;
       }
};

                                                             ***Rolling Hash and Multihash***

    #define ll long long
    //static vector<ll>kk,primes;
 
// change '0' to '#' if needed or remove '0';
struct string_hash {
  int len;
  ll mod, poly, inv;
  vector<ll> prefix;
  vector<ll> invs;

  void init(int n, string s, ll k = 89, ll m = 1000000007) {
    mod = m;
    poly = k;
    prefix = vector<ll>(n);
    invs = vector<ll>(n);

    invs[0] = 1;
    inv = minv(k);
    for (int i = 1; i < n; i++) {
      invs[i] = (invs[i - 1] * inv) % mod;
    }

    ll x = 1;
    prefix[0] = (s[0] - '0' + 1);
    for (int i = 1; i < n; i++) {
      x = (x * k) % mod;
      prefix[i] = (prefix[i - 1] + x * (s[i] - '0' + 1)) % mod;
    }

    len = n;
  }

  void extend(string next) {
    int x = next.length();
    for (int i = 0; i < x; i++) {
      invs.push_back((invs[i - 1] * inv) % mod);
    }

    ll p = mpow(poly, len - 1);
    for (int i = 0; i < x; i++) {
      p = (p * poly) % mod;
      prefix.push_back((prefix[i - 1] + p * (next[i - len] - '0' + 1)) % mod);
    }

    len += x;
  }

  ll get_hash(int left, int right) {
    if (left == 0) return prefix[right];
    return ((prefix[right] - prefix[left - 1] + mod) * invs[left]) % mod;
  }

  ll mpow(ll base, ll exp) {
    ll res = 1;
    while (exp) {
      if (exp % 2 == 1) {
        res = (res * base) % mod;
      }
      exp >>= 1;
      base = (base * base) % mod;
    }
    return res;
  }
  ll minv(ll base) {
    return mpow(base, mod - 2);
  }
};

template<int K>
struct multihash {
  string_hash sh[K];
    vector<ll>kk {
  89,
  101,
  189,
  94,
  621,
  (ll)rand() % 1000 + 101,
  (ll)rand() % 2000 + 121,
  (ll)rand() % 4000 + 141,
  (ll)rand() % 8000 + 161,
  (ll)rand() % 16000 + 183
};

 vector<ll>primes {
  533000401,
  735632791,
  776531419,
  797003413,
  817504243,
  920419813,
  961748941,
  982451653,
  1000000007,
  1000000009
};

  void init(int n, string s) {
       
    for (int i = 0; i < K; i++) {
      sh[i].init(n, s, kk[i], primes[9 - i]);
    }
  }

  vector<ll> get_hash(int l, int r) {
    vector<ll> ret(K);
    for (int i = 0; i < K; i++) {
      ret[i] = sh[i].get_hash(l, r);
    }
    return ret;
  }

  bool compare(vector<ll> a, vector<ll> b) {
    for (int i = 0; i < K; i++) {
      if (a[i] != b[i]) return 0;
    }
    return 1;
  }
};
