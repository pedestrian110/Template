                                                             ***Bitwise Operation***
1. a+b=2*(a&b)+a^b
2. a^b=~(a&b)&(a|b)
3. check if x is even number x&1=0 if x is even.
4. x is divisible by 2^k exactly when x&(2^k-1)=0;
5. x<<k corresponds to multiplying x by 2^k.
6. x>>k corresponds to dividing x by 2^k rounded down to an integer.  
7. x&(x-1) sets the last one bit of x to zero
8. x|(1<<k) sets the kth bit of x to one.
9. x&~(1<<k) sets the kth bit of x to zero.
10. x^(1<<k) inverts the kth bit of x.
11. x&~x sets all the one bits to zero except for the last one bit.
12. x|(x-1) inverts all the bits after the last one bit.
13. if x is positive number then x is a power of 2 when x&(x-1)=0.
14. __builtin_clz(x):- the number of zeros at the beginning of the number.
15. __builtin_ctz(x):- the number of zeros at the end of the number.
16. __builtin_popcount(x):-the number of ones in the number.
17. __builtin_parity(x):-the parity(even or odd) of the number of ones.
18. __bit_width(x)->total number digit from till last one in right.
                                                              ***XOR from 1 to n ***
                       
int computeXOR(int n) 
{ 
    
  // If n is a multiple of 4 
  if (n % 4 == 0) 
    return n; 
  
  // If n%4 gives remainder 1 
  if (n % 4 == 1) 
    return 1; 
  
  // If n%4 gives remainder 2 
  if (n % 4 == 2) 
    return n + 1; 
  
  // If n%4 gives remainder 3 
  return 0; 
} 


                                                               ***Iterating Each Bits of a Number x***

unsigned int v;-> count the number of bits set in v
unsigned int c;-> c accumulates the total bits set in v

for (c = 0; v; v >>= 1)
{
  if(v&1==1)
  {
    c++;
   //do some operation
   cout<<'1';
  }
  else
  {
   //do some operation
   cout<<'0';
   }
}


                                                           ***Traversing each bit and finding number of zero***


   int ct=0;
   for (int x = 1; x <= n; x = x<<1) 
   {
        if ((x & n) == 0)
            ct++; 
   }
                                                              ***Converting an integer to binary string***

string DecimalToBinaryString(int a)
{
    string binary = "";
    int mask = 1;
    for(int i = 0; i < 31; i++)
    {
        if((mask&a) >= 1)
            binary = "1"+binary;
        else
            binary = "0"+binary;
        mask<<=1;
    }
    cout<<binary<<endl;
    return binary;
}