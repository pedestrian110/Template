                                                  ***struct***



1.struct keyword is optional in c++
2.In c struct you can only define variable but not function
3.private,public is not possible in c
struct book
{
private://only access in this struct
  int bookid;
  char title[20];
  float price;
public://this can be access anywhere
  void input()
  {
    cout<<"Enter bookid, title and price"<<endl;
    cin>>bookid>>title>>price;//member function can be access without dot operator
  }
  void display()
  {
   cout<<bookid<<" "<<title<<" "<<price<<endl;
  }
};
int main()
{
 book b1;
 b1.input();
 b1.display();
}


                                                 ***Struct Padding***

--> To reduce number of CPU cycles we use extra space in memory allocation struct.
--> For a 32 bit architecture, 1 CPU cycle is 4 bit.
--> If one part of variable required 1 cycle and the other part required another cycle then to avoid this compiler completely shift the variable in 1 word and remaining memory is called padding.
--> Packing is used to avoid padding. #pragma pack(1)

                                                  ***class***



the only difference between structure and class is that,
-the members of struct are by default public and
-the members of class are by default private.

membership label--> class name + scope resolution operator(::)
--> you can define member function outside of class as well

inline --> Expands at call site (like macros) to avoid function call overhead.
--> Compiler may ignore inline for complex functions.
--> Use inline function for Small, frequent calls (e.g., getters, math ops).
--> Avoid for large/recursive functions.
--> inside class a function is by default inline
--> but outside you have to use inline keywords.

// Implicitly inline (defined inside class)
class Example {
public:
    void show() { cout << "Inline!"; }  
};

// Explicitly inline (defined outside class)
inline void Example::display() { cout << "Inline!"; }

--> class is description of object
--> object is instance of class
--> collection of instance member variable of an object is called state.
--> state should be change with the help of method. This is also called Encapsulation.
class Complex
{
private:
int a,b;//instance member variable
public:
void set_data(int,int);//instance member function
};
void Complex::set_data(int x,int y)
{
a=x;
b=y;
}

                                                 ***Static Members***



static local variable
-->they are by default initialized to zero
-->their lifetime is throughout the program
void fun()
{
static int x;//it get memory when program start
int y;//it will create when fun is called and destroy after fun complete
}
static member variable or class member variable
-->declared inside the class body
-->it does not belong to any object but to the whole class
-->there will be only one copy of static member variable for the whole class
-->defined outside the class
class Account
{
private:
int balance;
static float roi;//this is the declaration only, you have to define outside
public:
void setBalance (int b)
{
balance=b;
}
static void setRoi(float r)
{
roi=r;}
};
float Account:: roi=3.5;//definition of static member variable outside class(mandatory)

how to access static variable without having any object of class?
Account::setRoi(4.5);
cout << Account::roi;   // Access static variable (if public)

static member function or class member function
--> they can be invoked with or without object
--> they can only access static members of the class
--> Cannot use this (no access to object-specific data).


                                             ***Constructors***



--> Special member function of a class.
--> Same name as the class.
--> No return type (not even void). Automatically called when an object is created.
--> Must be an instance member function (cannot be static).

(A) Default Constructor
--> Takes no arguments.
--> If no constructor is defined, the compiler provides a default one.
class Complex {
public:
    Complex() { cout << "Default Constructor"; }  // User-defined
};
Complex c1;  // Calls default constructor

(B) Parameterized Constructor
--> Takes arguments to initialize objects.
class Complex {
private:
    int a, b;
public:
    Complex(int x, int y) { 
        a = x; 
        b = y; 
    }
};
Complex c1(3, 4);  // Calls parameterized constructor

(C) Copy Constructor
--> Creates an object by copying another object.
--> Compiler provides a default copy constructor if not defined.
--> Must take reference (Complex(Complex &c)), otherwise it leads to infinite recursion.
class Complex {
public:
    Complex(Complex &c) {  // Copy constructor
        a = c.a;
        b = c.b;
    }
};
Complex c2 = c1;  // Calls copy constructor


How to call constructor?
(A) Implicit Call (Automatic)
--> When an object is created:
Complex c1;          // Calls default constructor
Complex c2(3, 4);    // Calls parameterized constructor
Complex c3 = c2;     // Calls copy constructor

(B) Explicit Call (Rarely Used)
--> Using functional notation:
Complex c4 = Complex(5, 6);  // Explicit call

-->Constructor is used to solve problem of initialization.
-->No Constructor in class then Compiler make two constructor default and copy constructor
-->if we not make copy constructor compiler will make copy constructor


                                                ***Destructors***



--> Special member function of a class.
--> Same name as the class, prefixed with ~ (tilde).
-->it can never be static
--> No return type (not even void). Automatically called when an object is destroyed.
--> No arguments (cannot be overloaded).

class GoodExample {
private:
    int* ptr;
public:
    GoodExample() {
        ptr = new int[100];  // Allocate memory
    }
    ~GoodExample() {         // Destructor
        delete[] ptr;        // Free memory
        cout << "Destructor called\n";
    }
};

int main() {
    GoodExample obj;  // Memory allocated
    return 0;         // Destructor called → Memory freed
}

When is a Destructor Called?
--> Object goes out of scope (e.g., local object in a function).
void test() {
    Complex c1;  // Constructor called
}                // Destructor called when `test()` ends

--> delete is called on a dynamically allocated object.
Complex* c2 = new Complex();  // Constructor called
delete c2;                    // Destructor called

Complex* arr = new Complex[3];  // Constructor called 3 times
delete[] arr;                   // Destructor called 3 times

--> Program terminates (global/static objects).

why destructor?
--> it should be defined to release resources allocated to an object
--> If a member variable is a pointer in an object, and the object gets destroyed, the resources allocated to that pointer are not automatically released. Therefore, you must explicitly release those resources (e.g., using the destructor).

Why and How to Use Virtual Destructors? 
--> If a class is meant to be inherited (base class), its destructor must be virtual. Otherwise, deleting a derived class object via a base class pointer won’t call the derived class destructor, causing resource leaks.

class Base {
public:
    Base() { cout << "Base Constructor\n"; }
    virtual ~Base() { cout << "Base Destructor\n"; }  // Virtual!
};

class Derived : public Base {
public:
    Derived() { cout << "Derived Constructor\n"; }
    ~Derived() override { cout << "Derived Destructor\n"; }  // Optional: 'override'
};

int main() {
    Base* obj = new Derived();
    delete obj;  // Correctly calls both destructors
    return 0;
}
--> If a class has any virtual functions, its destructor should be virtual

                                            ***Operator Overloading***


--> Operator overloading allows you to redefine how operators (like +, -, ++, etc.) work for user-defined types (classes and structures).

(A) Basic Operator Overloading (+, -)

class Complex {
private:
    int a, b;
public:
    void setData(int x, int y) {
        a = x;
        b = y;
    }

    // Overloading '+' operator
    Complex operator+(Complex c) {
        Complex tmp;
        tmp.a = a + c.a;  // Adds real parts (a)
        tmp.b = b + c.b;  // Adds imaginary parts (b)
        return tmp;
    }

    // Overloading unary '-' operator (negation)
    Complex operator-() {
        Complex tmp;
        tmp.a = -a;  // Negates real part
        tmp.b = -b;  // Negates imaginary part
        return tmp;
    }
};

int main() {
    Complex c1, c2, c3, c4;
    c1.setData(3, 4);  // c1 = 3 + 4i
    c2.setData(5, 6);  // c2 = 5 + 6i

    c3 = c1 + c2;  // Calls operator+ → c3 = (3+5) + (4+6)i = 8 + 10i
    c4 = -c3;      // Calls operator- → c4 = -8 -10i
}

(B) Increment Operators (++) Overloading

class Integer {
private:
    int x;
public:
    void setData(int a) { x = a; }

    // Pre-increment (++i)
    Integer operator++() {
        Integer i;
        i.x = ++x;  // Increments first, then assigns
        return i;
    }

    // Post-increment (i++)
    Integer operator++(int) {  // 'int' is a dummy parameter
        Integer i;
        i.x = x++;  // Assigns first, then increments
        return i;
    }
};

int main() {
    Integer i1, i2;
    i1.setData(3);  // x = 3

    i2 = ++i1;  // Pre-increment → i1.x becomes 4, i2.x = 4
    i2 = i1++;  // Post-increment → i2.x = 4, then i1.x becomes 5
}

Rules of Operator Overloading
--> Cannot change operator precedence (e.g., * is always evaluated before +).
--> Cannot overload operators for built-in types (e.g., int + int cannot be changed).
--> Cannot create new operators (e.g., ** is not allowed).
--> Some operators cannot be overloaded (e.g., ::, .*, ?:).


                                                 ***Friend Function***



--> Not a member of the class.
--> Declared inside the class with friend.
--> Defined outside the class (no membership label ClassName::).
--> Can access private/protected members of the class.
--> No caller object (called like a normal function)

class Complex {
private:
    int a, b;
public:
    void setData(int x, int y) { a = x; b = y; }
    friend void show(Complex c);  // Declaration
};

// Definition (outside class)
void show(Complex c) {
    cout << c.a << " " << c.b;  // Accesses private members
}

int main() {
    Complex c1;
    c1.setData(3, 4);
    show(c1);  // Output: 3 4
}

Why Use Friend Functions?
--> Allows external functions to access private data.
--> Useful for operator overloading (e.g., <<, >>).
--> Enables shared functionality between multiple classes.

(A) A single function can be a friend of multiple classes.

class B;  // Forward declaration

class A {
private:
    int a;
public:
    void setData(int x) { a = x; }
    friend void sum(A, B);  // Friend of A
};

class B {
private:
    int b;
public:
    void setData(int y) { b = y; }
    friend void sum(A, B);  // Friend of B
};

// Friend function definition
void sum(A obj1, B obj2) {
    cout << obj1.a + obj2.b;  // Accesses private members of A and B
}

int main() {
    A x;
    B y;
    x.setData(5);
    y.setData(10);
    sum(x, y);  // Output: 15
}

(B) Overloading operators as friend functions
--> Some operators (like <<, >>) must be overloaded as friend functions because:
--> They require the left operand to be a stream object (cout, cin).
--> They cannot be member functions (since we can't modify ostream/istream).
class Complex {
private:
    int a, b;
public:
    void setData(int x, int y) { a = x; b = y; }
    friend Complex operator+(Complex, Complex);  // Friend declaration
};

// Definition
Complex operator+(Complex X, Complex Y) {
    Complex tmp;
    tmp.a = X.a + Y.a;
    tmp.b = X.b + Y.b;
    return tmp;
}

int main() {
    Complex c1, c2, c3;
    c1.setData(3, 4);
    c2.setData(5, 6);
    c3 = c1 + c2;  // Calls operator+
}

(C) Overloading of insertion and extraction opertators

class Complex {
private:
    int a, b;
public:
    friend ostream& operator<<(ostream&, Complex);  // Output
    friend istream& operator>>(istream&, Complex&); // Input
};

// Overloading << (Output)
ostream& operator<<(ostream &dout, Complex C) {
    dout << C.a << " + " << C.b << "i";
    return dout;
}

// Overloading >> (Input)
istream& operator>>(istream &din, Complex &C) {
    din >> C.a >> C.b;
    return din;
}

int main() {
    Complex c1;
    cin >> c1;    // Calls operator>>
    cout << c1;   // Calls operator<<
}

(D) Member function of one class can become friend to another class
--> A specific member function of a class can be a friend of another class.

class B;  // Forward declaration

class A {
public:
    void fun1();  // Will be friend of B
    void fun2();  // Not a friend
};

class B {
private:
    int b;
public:
    friend void A::fun1();  // Only fun1 is friend
};

void A::fun1() {
    B obj;
    obj.b = 10;  // Allowed (friend access)
    cout << obj.b;
}

void A::fun2() {
    B obj;
    // obj.b = 20;  // Error (not a friend)
}

int main() {
    A a;
    a.fun1();  // Works
    a.fun2();  // No access to B::b
}

                                                ***Inheritance***



--> Inheritance allows a new class (Derived/Child) to acquire properties and behaviors from an existing class (Base/Parent).
--> Base Class (Parent): The class being inherited from.
--> Derived Class (Child): The class that inherits.
--> Visibility Modes: Control access to inherited members (public, protected, private).

class Base {
    // Base class members
};

class Derived : visibility_mode Base {
    // Derived class members
};

Types of Inheritance

(A) Single Inheritance (One base class → One derived class)
class A { /* Parent */ };
class B : public A { /* Child */ };

(B) Multilevel Inheritance (Chain of inheritance)
class A { };
class B : public A { };
class C : public B { };  // C inherits from B, which inherits from A

(C) Multiple Inheritance (Derived class inherits from multiple base classes)
class A1 { };
class A2 { };
class B : public A1, public A2 { };  // B inherits from A1 and A2

(D) Hierarchical Inheritance (One base class → Multiple derived classes)
class A { };
class B1 : public A { };
class B2 : public A { };  // Both B1 and B2 inherit from A

Access Rules

--> private → Never accessible in derived class.
--> protected → Accessible in derived class.
--> public → Depends on inheritance mode.

Constructors in Inheritance
--> Base class constructor runs first, then derived class.
--> If base has no default constructor, derived must explicitly call base constructor.
--> Destructors run in reverse order (Derived → Base).
class Base {
public:
    Base() { cout << "Base Constructor\n"; }
    Base(int x) { cout << "Base Param: " << x << "\n"; }
};

class Derived : public Base {
public:
    // Calls Base() by default
    Derived() { cout << "Derived Constructor\n"; }

    // Explicitly calls Base(int)
    Derived(int y) : Base(y) { 
        cout << "Derived Param: " << y << "\n"; 
    }
};

int main() {
    Derived d1;      // Output: Base Constructor → Derived Constructor
    Derived d2(5);   // Output: Base Param: 5 → Derived Param: 5
}

Why Derived Must Call Base Constructor?
--> If Base has no default constructor, the derived class must explicitly call a base constructor.
class Base {
public:
    Base(int x) { }  // No default constructor
};

class Derived : public Base {
public:
    // ❌ Error: Must call Base(int)
    Derived() { }  

    // ✅ Correct: Explicitly calls Base(int)
    Derived() : Base(0) { }  
};


                                               ***this pointer**




-->A pointer contains address of an object is called Object pointer.
-->An object can be access either by its name using dot(.) operator or by pointer using arrow(-->).
Ex-
   Box *p, smallBox;
   p=&smallBox;
   p->setDimension(12,10,5);
   smallBox.setDimension(12,21,12);
-->this is a local object pointer in every instance member function containing address of the caller object.
-->this pointer can not be modify.
-->it is used to refer caller object in member function.

(A) Resolving Name Conflicts
--> When a local variable (function parameter) has the same name as a class member, this helps distinguish them.
class Box {
private:
    int l, b, h;
public:
    void setDimension(int l, int b, int h) {
        this->l = l;  // ✅ Refers to member 'l'
        this->b = b;  // ✅ Refers to member 'b'
        this->h = h;  // ✅ Refers to member 'h'
    }
};
(B) Returning the Current Object
--> this can be used to return the current object (useful for method chaining).
class Box {
public:
    Box& setL(int l) { 
        this->l = l; 
        return *this;  // Returns the current object
    }
    Box& setB(int b) { 
        this->b = b; 
        return *this; 
    }
};

int main() {
    Box b;
    b.setL(10).setB(20);  // Method chaining
}

How this Works?
--> Implicitly Passed: When a member function is called, the compiler silently passes this as a hidden argument.
// What you write:
obj.func(x);

// What compiler does:
func(&obj, x);  // 'this' is passed as first argument

--> Cannot Modify this: It is a constant pointer (ClassName* const), so its address cannot be changed.
this = nullptr;  // ❌ Error (cannot modify 'this')

--> Compare objects (this == &otherObj).

                                              ***new and delete***




SMA->static memory allocation:- memory allocation will decided at compile time
DMA->Dynamic Memory Allocation:-memory allocation will decided at runtime
 
-->for dynamic memory allocation you need new keyword
 int *p=new int;

-->the newly allocated memory block (right side) has no name but its address is stored in pointer p(left side).
 Complex *ptr=new Complex;
 float *q=new float[5];
-->starting block address will be stored in q;

delete p;// it will delete the pointed single memory block
delete []p;// it will delete the pointed array.

                                             ***Method Overriding***

--> Same function name in both base and derived class.
--> Same return type and parameters (signature must match).
--> Inheritance must be present (derived class extends base class).
--> The function in the base class must be virtual (for runtime polymorphism).

class A {
public:
    virtual void f1() { cout << "A::f1()\n"; }  // Virtual enables overriding
    void f2() { cout << "A::f2()\n"; }
};

class B : public A {
public:
    void f1() override { cout << "B::f1()\n"; }  // Overrides A::f1()
    void f2(int x) { cout << "B::f2(int)\n"; }   // ❌ Not overriding (different signature)
};

int main() {
    B obj;
    obj.f1();  // Calls B::f1() (overridden)
    obj.f2(5); // Calls B::f2(int) (hides A::f2())
    // obj.f2(); // ❌ Error: A::f2() is hidden
}

Early Binding (Compile-Time Polymorphism)
--> The compiler decides which function to call at compile-time based on the object's declared type (not its actual type).
A* ptr = new B();  // Base pointer, Derived object
ptr->f1();  // Calls B::f1() (if virtual)
ptr->f2();  // Calls A::f2() (early binding)


                                              ***Virtual function***


Early Binding with Base Pointers
--> When you use a base class pointer to point to a derived class object, the compiler (by default) uses early binding (compile-time decision) to call functions. 
--> This means: It calls the base class version of the function, even if the object is of a derived class.
class A {
public:
    void f1() { cout << "A::f1()\n"; }  // Not virtual
};

class B : public A {
public:
    void f1() { cout << "B::f1()\n"; }  // Overriding (but not virtual)
};

int main() {
    A *p, o1;
    B o2;
    p = &o2;       // Base pointer points to derived object
    p->f1();       // Calls A::f1() ❌ (Early binding)
}


Virtual Functions (Late Binding)
--> By declaring a function as virtual, we enable runtime polymorphism (late binding). The correct function is called based on the actual object type, not the pointer type.
class A {
public:
    virtual void f1() { cout << "A::f1()\n"; }  // Now virtual
};

class B : public A {
public:
    void f1() override { cout << "B::f1()\n"; }  // Overrides A::f1()
};

int main() {
    A *p, o1;
    B o2;
    p = &o2;       // Base pointer points to derived object
    p->f1();       // Calls B::f1() ✅ (Late binding)
}

--> Once a function is virtual in the base class, all derived versions are automatically virtual (even without the keyword).

How Virtual Functions Work Internally? (vptr and vtable)
-->When a class has at least one virtual function, the compiler adds:

(A) vptr (Virtual Pointer):
-->A hidden pointer in every object of the class.
-->Points to the class’s vtable (Virtual Table).

(B) vtable (Virtual Table):
--> A hidden array of function pointers.
--> Contains addresses of all virtual functions for that class.
class A {
public:
    virtual void f1() {}  // vtable entry 1
    virtual void f2() {}  // vtable entry 2
};

class B : public A {
public:
    void f1() override {}  // Overrides A::f1()
    // f2() is inherited (no override)
};

vtable for A:
Index	Function Address
0	A::f1()
1	A::f2()

vtable for B:
Index	Function Address
0	B::f1()	// Overridden
1	A::f2()	// Inherited

How It Works at Runtime?
--> When p->f1() is called:
--> The compiler follows p->vptr to find the vtable.
--> It then calls the function at vtable[0] (which is B::f1() if p points to a B object).


                                              ***Abstract Class***




Pure Virtual function
--> A do nothing function is pure virtual function.
--> You can not create an object of class which contain pure virtual function.
--> for accessing fucntion you need to override the virtual function in child class.
class Person
{
public:
virtual void fun()=0;//Pure virtual function
};
class Student:public Person
{
public:
void fun()
{
}
};

--> A class containing at least one pure virtual function is an abstract class.
--> We can not instantiate abstract class.
--> Acts as an interface or base class for derived classes.

Uses of Abstract Class
--> When you want to enforce a common interface
--> When base class shouldn’t be instantiated

#include <iostream>
using namespace std;

// Abstract class (due to pure virtual function)
class Shape {
public:
    virtual float area() = 0;  // Pure virtual
    virtual void display() {   // Can have implemented methods
        cout << "This is a shape." << endl;
    }
};

// Concrete derived class
class Circle : public Shape {
    float radius;
public:
    Circle(float r) : radius(r) {}
    float area() override {    // Must override
        return 3.14 * radius * radius;
    }
};

// Concrete derived class
class Square : public Shape {
    float side;
public:
    Square(float s) : side(s) {}
    float area() override {    // Must override
        return side * side;
    }
};

int main() {
    // Shape s;  // ❌ Error: Cannot instantiate abstract class

    Circle c(5);
    Square sq(4);

    cout << "Circle area: " << c.area() << endl;  // 78.5
    cout << "Square area: " << sq.area() << endl; // 16

    // Polymorphism
    Shape* shapes[] = { &c, &sq };
    for (Shape* s : shapes) {
        s->display();  // Inherited non-pure function
        cout << "Area: " << s->area() << endl;
    }
}

--> if a derived class doesn't override a pure virtual function the derived class also becomes abstract, and cannot be instantiated.
--> abstract classes can have constructors (used by derived classes).
--> abstract classes can have member variables.


                                                  ***Template***




-->the keyword template is used to define function and class template
-->it is a way to make your function or class generalize as far as data type is concern.
-->Function template is also known as generic function
-->this is for avoiding method overloading based on data type

template<class T> T big(T a, T b)
{
      if(a>b)
            return (a);
      else 
            return (b);
}
int main()
{
      cout<<big(1,2)<<endl;
      cout<<big(1.2,1,9)<<endl;
}

Here T is place holder which will be replace by appropriate data type based on function calling.

-->class template is also known as generic class

template<class T> class class_name
{
...
};
int main()
{
  class_name <name_of_data_type>obj;
}

                                                  ***File Handling***



input output stream class(ios)

                         ios
         istream                     ostream
                       iostream
            ifstream             ofstream
                        fstream
     istream_withassign             ostream_withassign
-->ios have two child:istream and ostream
-->istream have three child:istream_withassign , ifstream and iostream
-->ostream have three child:ostream_withassign , ofstream and iostream

#include<fstream>
int main()
{
 ofstream fout;
 fout.open("file.txt");
 fout<<"hello";
 fout.close();
}

#include<fstream>
int main()
{
 ifstream fin;
 char ch;
 fin.open("file.txt");
 fin>>ch;
 while(!fin.eof())
 {
   cout<<ch;
   fin>>ch;
 }
 fin.close();
}

                                                  ***File Opening Modes***



ios::in -->input/read
ios::out-->output/write
ios::app-->append
ios::ate-->update
ios::binary-->binary

-->As a second argument of open() function
ofstram fout;
fout.open("file name",file_opening_mode);

                                                 ***Text mode vs binary mode***



-->Text mode is the default opening mode
-->Binary mode can be specified with ios::binary
-->In text mode special character translation happend but in binary mode as it is written

fout<<"My name is\nMahesh";
In text mode:-
My name is
Mahesh
In binary mode:-
My name is\nMahesh

                                                    ***tellg and tellp***




tellg()
-->defined in istream class;
-->its prototype is streampos
-->return the position of character in the input stream
-->pos of get pointer
tellp()
-->defined in ostream class;
-->its prototype is streampos
-->return the position of character in the output stream
-->pos of put pointer

                                               ***Initializers list***


-->Initializer list is used to initialize data memebers of a class
-->the list of members to be intialized is indicated with constructor as comma separated list followed by a colon.
-->Since const varible should be inilize at the time of defination and since in class you can not inilize, for this situation you need to use initializer list.
-->There are situations where initialization of data members inside constructor doesn't work and Initializer list must be used.
-->For intialization of non static const data members.
-->For intialization of reference members. 
class Demo
{
private:
int a,b;
const int x;
int &y;
public:
Demo(int &n):a(5),b(6),x(5),y(n)
{}
};
                                                 

                                          ***Deep Copy and Shallow Copy***


How we can create a copy of object?
-->Copy Constructor
-->Implicit copy assignment operator

Demo d1;
Demo d2=d1;//Copy Constructor
 or 
Demo d2;
d2=d1;//Implicit copy assignment operator

ShallowCopy
-->Creating copy of object by copying data of all member variables as it is.
-->ShallowCopy should not be allowed  in case of there is a pointer in an object and that pointer is accessing some mermory outside otherwise it will share same memory resources
DeepCopy
-->Creating an object by copying data of another object along with the values of memory resources resides outdise the object but handled by that object.

class Demo
{
 private:
 int a,b;
 int *p;
 public:
 Demo()
 {
  p=new int;
  }
 Demo(Demo &d)
 {
  a=d.a;
  b=d.b;
  p=new int;
  *p=*(d.p);
 }
~Demo()
{
 delete p;
}
};
Dangling pointer-->pointers that do not point to a valid object of the appropriate type.

-->class type or Non-premitive type

                                ***Type Conversion***


1.Primitive Type to class type through constructor
class Complex
{
 private:
 int a,b;
 public:
 Complex(){}
 Complex(int k)
 { a=k;b=0;}
};
int main()
{
 Complex c1;
 int x=5;
 c1=x;//it means c1.Complex(x)
}

2.class type to primitive type
-->class type to primitive type can be implemented with casting operator
operator type()
{
...
return (type-data);
}

class Complex
{
 private:
 int a,b;
 public:
 operator int()
 {
  return(a);
  } 
};
int main()
{
 Complex c1;
 int x;
 x=c1;
}

3.One class type to another class type 
it can be done in both ways
-->Constructor
class Product
{
 private:
 int m,n;
 public:
 int getM()
 {
  return m;
  }
 int getN()
 {
  return n;
 }
};
class Item
{
 private:
 int a,b;
 public:
 Item(){}
 Item(Product p)
 {
  a=p.getM();
  b=p.getN();
  }
};

int main()
{
Item i1;
Product p1;
i1=p1;
}

-->Casting operator

                                  ***Exception Handling***


-->Exception is any abnormal behaviour, run time error.
-->C++ provides a built-in error handling mechanism that is called exception handling
-->Using exception handling, you can more easily manage and respond to runtime errors.

try-->Program statements that you want to monitor for exceptions are contained in a try block.
throw-->if any exception occurs within the try block,it is thrown using throw.
catch-->The exception is caught ,using catch and processed.

syntax-->

try{
}
catch(type1 arg){
}
catch(type2 arg){
}
...
catch(typeN arg){
}

int main()
{
   try{
       if(k==1)
            throw 1;
       if(k==2)
            throw 2;
       cout<<"No throw statement run"<<endl;
    }
   catch(int e){
       cout<<"Exception "<<e<<" occur"<<endl;
    }
   cout<<"End of program"<<endl;
}
 
-->If you don't need access to the exception itself specify only type in the catch clause- arg is optional.
-->Any type of data can be caught, including classes that you create.

                             ***Dynamic Constructor***

-->Constructor can allocate dynamically created memory to the object
-->Thus object is going to use memory region, which is dynamically created by constructor.

class Demo
{
  private:
  int a;
  int *p;
  public:
  Demo(int k)
  {
   p=new int;
   *p=k;
  }
};


                             ***namespace***

Header file-->In header file only declaration of function or identfiers is present.
namespace-->It is a group of declaration
-->this will avoid nameconflict.
-->namespace is a container for identifiers

namespace Myspace{
}
-->namespace definition doesn't terminates with a semicolon like in class definition
-->namespace definition must be done at global scope or nested inside another namespace
-->You can use an alias name for your namespace name, for ease of use
 namespace ms=Myspace;
-->you can not instance of namespace
-->A namespace definition can be continued and extended over multiple files.

#include<iostream>
using namespace std;
namespace Myspace{
     int a;
     int f1();
     class A
     {
       public:
              void f2();
     };
}
int Myspace::f1(){
cout<<"Hi"<<endl;
}
void Myspace::A::f2()
{
cout<<"HH"<<endl;
}
using namespace Myspace;
int main()
{
     a=5;
}


                                ***Virtual Destructor***
for late binding
class A
{
virtual ~A()
};

                               ***Nested class***



-->class inside a class is called nested class
-->A nested class is a member and as such has the same access rights as any other member.
-->the members of an enclosing class have no special access to members of a nested class, the usual access rules shall be obeyed.

class A
{
  private:
  int a;
  public:
   class B{
    private:
     int x;
    public:
      int f(){}
    };
   
  B object;
  
    void fun(){
    }
};
  
int main()
{
   A::B obj;
}
