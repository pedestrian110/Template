                                                  ***struct***



1.struct keyword is optional in c++
2.In c struct you can only define variable but not function
3.private,public is not possible in c
struct book
{
private://only access in this struct
  int bookid;
  char title[20];
  float price;
public://this can be access anywhere
  void input()
  {
    cout<<"Enter bookid, title and price"<<endl;
    cin>>bookid>>title>>price;//member function can be access without dot operator
  }
  void display()
  {
   cout<<bookid<<" "<<title<<" "<<price<<endl;
  }
};
int main()
{
 book b1;
 b1.input();
 b1.display();
}

                                                  ***class***



the only difference between structure and class is that,
-the members of struct are by default public and
-the members of class are by default private.

membership label--> class name + scope resolution operator(::)
-->you can define member function outside of class as well
-->inside class a function is by default inline
but outside you have to use inline keywords.
-->class is description of object
-->object is instance of class
-->collection of instance member variable of an object is called state.
state should be change with the help of method.
class Complex
{
private:
int a,b;//instance member variable
public:
void set_data(int,int);//instance member function
};
void Complex::set_data(int x,int y)
{
a=x;
b=y;
}

                                                 ***Static Members***



static local variable
-->they are by default initialized to zero
-->their lifetime is throughout the program
void fun()
{
static int x;//it get memory when program start
int y;//it will create when fun is called and destroy after fun complete
}
static member variable or class member variable
-->declared inside the class body
-->it does not belong to any object but to the whole class
-->there will be only one copy of static member variable for the whole class
-->defined outside the class
class Account
{
private:
int balance;
static float roi;//this is the declaration only you have to define outside
public:
void setBalance (int b)
{
balance=b;
}
static void setRoi(float r)
{
roi=r;}
};
float Account:: roi=3.5;//definition of static member variable

how to access static variable without having any object of class?
Account::setRoi(4.5);

static member function or class member function
-->they can be invoked with or without object
-->they can only access static members of the class

                                             ***Constructors***



-->it is a member function of a class
-->name of the constructor is same as the name of the class
-->it has no return type,so can't use return
-->it must be an instance member function that is it can never be static

class Complex
{
private:
int a,b;
public:
Complex(int x,int y)
{
a=x;
b=y;
}
Complex()
{
cout<<"Constructor call hua";
}
Complex(Complex &c)//without reference the same constructor repetedly call it will create object each time and again again object inilize.
{
a=c.a;
b=c.b;
}
};
void main()
{
Complex c1,c2;
}
How to call constructor?
-->Constructor is implicitly invoked when an object is created.
-->Constructor is used to solve problem of initialization.
default constructor:-if you have not define any constructor in class defination.Compiler will make a constructor of without argument.

Complex c4=c1;or Complex c4(c1);
-->NO Constructor in class then Compiler make two constructor default and copy constructor
-->if we not make copy constructor compiler will make copy constructor

                                                ***Destructors***



-->it is an instance member funtion of a class
-->name of the destructor is same as the name of a class but preceded by tilde(~)
-->it can never be static
-->has no return type
-->Destructor takes no argument (No overloading is possible)

class Complex
{
private:
int a,b;
public:
~Complex()
{
}
};
-->it is invoked implicitly when object is going to destroy
-->destructor is last funtion before object get destroy
why destructor?
-->it should be defined to release resources allocated to an object
-->let's a member variable is pointer in an object the if the object get destroy then resources allocated to pointer is not get release so you need explicitly release the resources allocated to pointer

                                            ***Operator Overloading***



class Complex
{
private:
int a,b;
public:
void setData(int x,int y)
{
a=x;
b=y;
}
Complex operator +(Complex c)
{
Complex tmp;
tmp.a=a+c.a;
tmp.b=b+c.b;
return tmp;
}
Complex operator -()
{
Complex tmp;
tmp.a=-a;
tmp.b=-b;
return tmp;
}
};
void main()
{
Complex c1,c2,c3,c4;
c1.setData(3,4);
c2.setData(5,6);
c3=c1+c2;
c4=-c3;

}
when an operator is overloaded with multiple jobs it is known as opertor overloading.

class Integer
{
private:
int x;
void setData(int a)
{
x=a;
}
Integer operator++()//pre increment
{
Integer i;
i.x=++x;
return i;
}
Integer operator++(int)//post increment
{
Integer i;
i.x=x++;
return i;
}
};
void main()
{
Integer i1,i2;
i1.setData(3);
i2=++i1;
i2=i1++;
}

                                                 ***Friend Function***



-->Friend function is not a member functio of a class to which it is friend
-->Friend function is declared in the class with friend keyword
-->it must be defined outside the class to which it is friend
-->Friend function can access any member of the class to which it is friend
-->Friend function cannot access memebers of the class directly
-->it has no caller objext
-->it should not be defined with membership label

class Complex
{
private:
int a,b;
public:
void setData(int x,int y)
{
a=x;
b=y;
}
friend void fun(Complex);
};
void fun(Complex c)
{
cout<<c.a+c.b<<endl;
}
void main()
{
Complex c1;
fun(c1);
}
-->Friend function can become friend to more than one class
class B;
class A
{
private:
int a;
public:
void setData(int x)
{a=x;}
friend void fun(A,B);
};
class B
{
private:
 int b;
public:
void setData(int y)
{b=y;}
friend void fun(A,B);
};
void fun(A o1 , B o2)
{
cout<<o1.a+o2.b<<endl;
}
void main()
{
A obj1;
B obj2;
obj1.setData(2);
obj2.setData(3);
fun(obj1,obj2);
}
-->Overloading of operators as a friend function
class Complex
{
private:
int a,b;
public:
void setData(int x,int y)
{
a=x;
b=y;
}
friend Complex operator +(Complex,Complex);
};
Complex operator+(Complex X, Complex Y)
{
Complex tmp;
tmp.a=X.a+Y.a;
tmp.b=X.b+Y.b;
return tmp;
}
void main()
{
Complex c1,c2,c3;
c1.setData(3,4);
c2.setData(5,6);
c3=c1+c2;
}
-->Overloading of insertion and extraction opertators
class Complex
{
private;
int a,b;
public:
void setData(int x,int y)
{
a=x;
b=y;
}
friend ostream& operator<<(ostream&,Complex);
friend istream& operator>>(istream&,Complex&);
};
ostream& operator<<(ostream &dout,Complex C)
{
cout<<C.a<<" "<<C.b;
return dout;
}
istream& operator>>(istream &din, Complex &C)
{
cin>>C.a>>C.b;
return din;
}
void main()
{
Complex c1;
cin>>c1;
cout<<c1;//operator<<(cout,c1);

-->Member function of one class can become friend to another class
class A
{
public:
void fun()
{...}
void foo()
{...}
};
class B
{
//friend class A;
friend void A::fun();
friend void B::foo();
};

                                                ***Inheritance***



It is a process of inheriting properties and behaviours of existing class into a new class.
Existing class = old class = Parent class
New class = Child class = Derived class

class Base_Class
{
};
class Derived_Class: Visibility_Mode Base_Class
{
};
class Car
{
};
class SportsCar:public Car
{
};
Types of Inheritance
1.Single Inheritance
class A
{
};
class B:public A
{
};

2.Multilevel Inheritance
class A
{
};
class B:public A
{
};
class C:public B
{
};
3.Multiple Inheritance
class A1
{
};
class A2
{
};
class B:public A1,public A2
{
};
4.Hierarchical Inheritance
class A
{
};
class B1:public A
{
};
class B2:public A
{
};

Visibility Modes
Private
Protected
Public

class A
{
private:
int a;
protected:
void setValue(int k)
{
a=k;}
};
class B:public A
{
public:
void setData(int x)
{
setValue(x);}
};
void main()
{
B obj;
}
-->object of child class can not access private and protected

                                         ***Constructor in Inheritance***



we need to make constructor in child class if you already define a constructor in parent class otherwise you will get error.

                                               ***this pointer**




-->A pointer contains address of an object is called Object pointer.
-->An object can be access either by its name using dot(.) operator or by pointer using arrow(-->).
Ex-
   Box *p, smallBox;
   p=&smallBox;
   p->setDimension(12,10,5);
   smallBox.setDimension(12,21,12);
-->this is a local object pointer in every instance member function containing address of the caller object.
-->this pointer can not be modify.
-->it is used to refer caller object in member function.

class Box
{
 private:
 int l,b,h;
 public:
 void setDimension (int l, int b, int h)
 {
  this->l=l; this->b=b;this->h=h;//name conflict problem solved
 }
};

                                              ***new and delete***




SMA->static memory allocation:- memory allocation will decided at compile time
DMA->Dynamic Memory Allocation:-memory allocation will decided at runtime
 
-->for dynamic memory allocation you need new keyword
 int *p=new int;

-->the newly allocated memory block (right side) has no name but its address is stored in pointer p(left side).
 Complex *ptr=new Complex;
 float *q=new float[5];
-->starting block address will be stored in q;

delete p;// it will delete the pointed single memory block
delete []p;// it will delete the pointed array.

                                             ***Method Overriding***



class A
{
public:
void f1(){}
void f2(){}

};
class B:public A
{
void f1(){}//Method overrding
void f2(int x)//Method hiding
};
int main()
{
B obj;
obj.f1();
}

Early Binding-->In case of overriding compiler will bind function when you call function with the help of obj.if you are accessing function by object then compiler will call function based on the data type of object , similarly for pointer it will call based on the data type of pointer.


                                              ***Virtual function***




-->Base class pointer can point to the object of any of its descendant class(this can lead to same pointer pointing to different type of class)
-->But its converse is not true.
class A
{
public:
void f1(){}
void f2(){}

};
class B:public A
{
void f1(){}//Method overrding
void f2(int x)//Method hiding
};
int main()
{
A *p,o1;
B o2;
p=&o2;
p->f1();//A
}
-->Due to early binding pointer will call function of class A even it is pointing to object of class B. This issue can be solve by delaying early binding (or late binding) with the help of virtual function.

class A
{
public:
virtual void f1(){}
void f2(){}

};
class B:public A
{
void f1(){}//Method overrding
void f2(int x)//Method hiding
};
int main()
{
A *p,o1;
B o2;
p=&o2;
p->f1();//B
}
-->By putting virtual keyword compiler will understand that there be late binding.
-->every descendent function of f1 will be virtual you donot need to put virtual in each descendent class.
-->Compiler will create a pointer name vptr in base class where virtual funtion is present and it will create array vtable for base class and for each descendent class that mean one pointer and many array .
-->vptr points array address
-->and each array block contain address of each virtual funtion in that particular class or there parent class if tha funtion is not overrided in child class but it is virtual in parent class.

                                              ***Abstract Class***




Pure Virtual function-->A do nothing function is pure virtual function.
-->You can not create an object of class which contain pure virtual function.
-->for accessing fucntion you need to override the virtual function in child class.
class Person
{
public:
virtual void fun()=0;//Pure virtual function
};
class Student:public Person
{
public:
void fun()
{
}
};

-->A class containing pure virtual function is an abstract class.
-->We can not instantiate abstract class.

                                                  ***Template***




-->the keyword template is used to define function and class template
-->it is a way to make your function or class generalize as far as data type is concern.
-->Function template is also known as generic function
-->this is for avoiding method overloading based on data type

template<class T> T big(T a, T b)
{
      if(a>b)
            return (a);
      else 
            return (b);
}
int main()
{
      cout<<big(1,2)<<endl;
      cout<<big(1.2,1,9)<<endl;
}

Here T is place holder which will be replace by appropriate data type based on function calling.

-->class template is also known as generic class

template<class T> class class_name
{
...
};
int main()
{
  class_name <name_of_data_type>obj;
}

                                                  ***File Handling***



input output stream class(ios)

                         ios
         istream                     ostream
                       iostream
            ifstream             ofstream
                        fstream
     istream_withassign             ostream_withassign
-->ios have two child:istream and ostream
-->istream have three child:istream_withassign , ifstream and iostream
-->ostream have three child:ostream_withassign , ofstream and iostream

#include<fstream>
int main()
{
 ofstream fout;
 fout.open("file.txt");
 fout<<"hello";
 fout.close();
}

#include<fstream>
int main()
{
 ifstream fin;
 char ch;
 fin.open("file.txt");
 fin>>ch;
 while(!fin.eof())
 {
   cout<<ch;
   fin>>ch;
 }
 fin.close();
}

                                                  ***File Opening Modes***



ios::in -->input/read
ios::out-->output/write
ios::app-->append
ios::ate-->update
ios::binary-->binary

-->As a second argument of open() function
ofstram fout;
fout.open("file name",file_opening_mode);

                                                 ***Text mode vs binary mode***



-->Text mode is the default opening mode
-->Binary mode can be specified with ios::binary
-->In text mode special character translation happend but in binary mode as it is written

fout<<"My name is\nMahesh";
In text mode:-
My name is
Mahesh
In binary mode:-
My name is\nMahesh

                                                    ***tellg and tellp***




tellg()
-->defined in istream class;
-->its prototype is streampos
-->return the position of character in the input stream
-->pos of get pointer
tellp()
-->defined in ostream class;
-->its prototype is streampos
-->return the position of character in the output stream
-->pos of put pointer

                                               ***Initializers list***


-->Initializer list is used to initialize data memebers of a class
-->the list of members to be intialized is indicated with constructor as comma separated list followed by a colon.
-->Since const varible should be inilize at the time of defination and since in class you can not inilize, for this situation you need to use initializer list.
-->There are situations where initialization of data members inside constructor doesn't work and Initializer list must be used.
-->For intialization of non static const data members.
-->For intialization of reference members. 
class Demo
{
private:
int a,b;
const int x;
int &y;
public:
Demo(int &n):a(5),b(6),x(5),y(n)
{}
};
                                                 

                                          ***Deep Copy and Shallow Copy***


How we can create a copy of object?
-->Copy Constructor
-->Implicit copy assignment operator

Demo d1;
Demo d2=d1;//Copy Constructor
 or 
Demo d2;
d2=d1;//Implicit copy assignment operator

ShallowCopy
-->Creating copy of object by copying data of all member variables as it is.
-->ShallowCopy should not be allowed  in case of there is a pointer in an object and that pointer is accessing some mermory outside otherwise it will share same memory resources
DeepCopy
-->Creating an object by copying data of another object along with the values of memory resources resides outdise the object but handled by that object.

class Demo
{
 private:
 int a,b;
 int *p;
 public:
 Demo()
 {
  p=new int;
  }
 Demo(Demo &d)
 {
  a=d.a;
  b=d.b;
  p=new int;
  *p=*(d.p);
 }
~Demo()
{
 delete p;
}
};
Dangling pointer-->pointers that do not point to a valid object of the appropriate type.

-->class type or Non-premitive type

                                ***Type Conversion***


1.Primitive Type to class type thorugh constructor
class Complex
{
 private:
 int a,b;
 public:
 Complex(){}
 Complex(int k)
 { a=k;b=0;}
};
int main()
{
 Complex c1;
 int x=5;
 c1=x;//it means c1.Complex(x)
}

2.class type to primitive type
-->class type to primitve type can be implemented with casting opertor
operator type()
{
...
return (type-data);
}

class Complex
{
 private:
 int a,b;
 public:
 operator int()
 {
  return(a);
  } 
};
int main()
{
 Complex c1;
 int x;
 x=c1;
}

3.One class type to another class type 
it can be done in both ways
-->Constructor
class Product
{
 private:
 int m,n;
 public:
 int getM()
 {
  return m;
  }
 int getN()
 {
  return n;
 }
};
class Item
{
 private:
 int a,b;
 public:
 Item(){}
 Item(Product p)
 {
  a=p.getM();
  b=p.getN();
  }
};

int main()
{
Item i1;
Product p1;
i1=p1;
}

-->Casting operator

                                  ***Exception Handling***


-->Exception is any abnormal behaviour, run time error.
-->C++ provides a built-in error handling mechanism that is called exception handling
-->Using exception handling, you can more easily manage and respond to runtime errors.

try-->Program statements that you want to monitor for exceptions are contained in a try block.
throw-->if any exception occurs within the try block,it is thrown using throw.
catch-->The exception is caught ,using catch and processed.

syntax-->

try{
}
catch(type1 arg){
}
catch(type2 arg){
}
...
catch(typeN arg){
}

int main()
{
   try{
       if(k==1)
            throw 1;
       if(k==2)
            throw 2;
       cout<<"No throw statement run"<<endl;
    }
   catch(int e){
       cout<<"Exception "<<e<<" occur"<<endl;
    }
   cout<<"End of program"<<endl;
}
 
-->If you don't need access to the exception itself specify only type in the catch clause- arg is optional.
-->Any type of data can be caught, including classes that you create.

                             ***Dynamic Constructor***

-->Constructor can allocate dynamically created memory to the object
-->Thus object is going to use memory region, which is dynamically created by constructor.

class Demo
{
  private:
  int a;
  int *p;
  public:
  Demo(int k)
  {
   p=new int;
   *p=k;
  }
};


                             ***namespace***

Header file-->In header file only declaration of function or identfiers is present.
namespace-->It is a group of declaration
-->this will avoid nameconflict.
-->namespace is a container for identifiers

namespace Myspace{
}
-->namespace definition doesn't terminates with a semicolon like in class definition
-->namespace definition must be done at global scope or nested inside another namespace
-->You can use an alias name for your namespace name, for ease of use
 namespace ms=Myspace;
-->you can not instance of namespace
-->A namespace definition can be continued and extended over multiple files.

#include<iostream>
using namespace std;
namespace Myspace{
     int a;
     int f1();
     class A
     {
       public:
              void f2();
     };
}
int Myspace::f1(){
cout<<"Hi"<<endl;
}
void Myspace::A::f2()
{
cout<<"HH"<<endl;
}
using namespace Myspace;
int main()
{
     a=5;
}


                                ***Virtual Destructor***
for late binding
class A
{
virtual ~A()
};

                               ***Nested class***



-->class inside a class is called nested class
-->A nested class is a member and as such has the same access rights as any other member.
-->the members of an enclosing class have no special access to members of a nested class, the usual access rules shall be obeyed.

class A
{
  private:
  int a;
  public:
   class B{
    private:
     int x;
    public:
      int f(){}
    };
   
  B object;
  
    void fun(){
    }
};
  
int main()
{
   A::B obj;
}
