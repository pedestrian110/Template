#pragma GCC optimize("O3")
#pragma GCC optimize("Ofast,unroll-loops")

#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
using namespace std;
#define debug(x) cout<<"#"<<" "<<x<<endl;
#define debugset(st) cout<<"["; for(auto it:st) {cout<<it<<",";} cout<<"]"<<endl;
#define debugmap(mp) cout<<"["; for(auto it:mp) {cout<<"["<<it.first<<","<<it.second<<"]"<<",";} cout<<"]"<<endl;
#define forl(i,n) for(int i=0;i<n;i++)
#define endl "\n"
#define pr(n) cout<<fixed<<setprecision(n)<<endl;
#define ll long long int
#define sz(a) (int)a.size()
#define pb(x) push_back(x)
#define pp pop_back

typedef tree<int,null_type,less<int>,rb_tree_tag,tree_order_statistics_node_update> indexed_set;

ll calpow(ll base,ll n)
{
    ll res=1;
    while(n>0)
    {
        if(n%2==1)
        {
            res=res*base;
            res%=M;

        }
        n=n>>1;
        base=(base*base)%M;
    }
 return res;
}

ll modinv(ll base)
{
    return calpow(base,M-2);
}

ll ncr(ll n,ll r)
{
    vector<ll>fact(n+1,1);
    for(ll i=2;i<=n;i++)
    {
        fact[i]=(fact[i-1]*i)%M;
    }
    ll inv=modinv(fact[r])*modinv(fact[r]);
    inv%=M;
    return (fact[n]*inv)%M;
}
const int M=1e9+7;
const int  N=1e7+19;
void knightstour()
{
    
}
int main()
{
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int t;
    cin>>t;
    while(t--)
    {
         knightstour();
         
    }

} 